save(Genre, file = "Genre.csv")
Movies <- read.csv("~/Shangeeth/Projects/Data Project #2 - Movie Ratings Prediction/IMDb movies.csv")
Genre <- Movies$genre
summary(is.na(Genre))
Genre_Table <- read.csv(file = Genre)
save(Genre, file = "Genre.csv")
unique(Genre)
sort(unique(Genre))
?sort
sort(unique(Genre)decreasing = TRUE)
sort(unique(Genre),decreasing = TRUE)
save(Genre, file = "Genre.csv")
read.csv("~/Genre.csv")
read.csv("~/Shangeeth/Projects/Data Project #2 - Movie Ratings Prediction/Genre.csv")
?save
?write.csv
Genre_Table <- data.frame(Genre)
write.csv(Genre_Table, file ="Genre.csv")
read.csv("~/Shangeeth/Projects/Data Project #2 - Movie Ratings Prediction/Genre.csv")
Genres <- read.csv("~/Shangeeth/Projects/Data Project #2 - Movie Ratings Prediction/Genre.csv")
View(Genres)
unlist(strsplit(Genre,","))
Genres <- unlist(strsplit(Genre,","))
Unique(Genres)
unique(Genres)
Summary(Genres)
barplot(Genres)
plot(Genres)
count.fields(Genres)
sort(unique(Genres))
Genres <- unlist(strsplit(Genre,", "))
sort(unique(Genres))
?gregexpr
?unlist
strsplit(Genre,", ")
regmatches(Genres, "Action")
gregexpr("Action",Genres)
Genres <- unlist(strsplit(Genre,", "))
regmatches(Genres,gregexpr("Action",Genres))
lengths(regmatches(Genres,gregexpr("Action",Genres)))
?lengths
for(i in unique(Genres)){
Genre_Count[i,1] <- sum(lengths(regmatches(Genres,gregexpr("Action",Genres))))
}
Genre_Count = df()
?df
Genre_Count = data.frame()
for(i in unique(Genres)){
Genre_Count[i,1] <- sum(lengths(regmatches(Genres,gregexpr(i,Genres))))
}
plot(Genre_Count,names.arg = rownames(Genre_Count))
View(Genre_Count)
plot(Genre_Count~c(1:25),names.arg = rownames(Genre_Count))
plot(Genre_Count$V1~c(1:25),names.arg = rownames(Genre_Count))
plot(Genre_Count$V1,names.arg = rownames(Genre_Count))
rownames(Genre_Count)
Genre_Count <- Genre_Count[order(Genre_Count$V1),]
Genre_Count <- Genre_Count[order(Genre_Count$V1),1]
Genre_Count = data.frame()
for(i in unique(Genres)){
Genre_Count[i,1] <- sum(lengths(regmatches(Genres,gregexpr(i,Genres))))
}
barplot(Genre_Count$V1,names.arg = rownames(Genre_Count))
barplot(i,names.arg = rownames(Genre_Count))
barplot(c(10,20,30,560,40),names.arg = rownames(Genre_Count))
Genre_Count2 <- Genre_Count[order(Genre_Count$V1),1]
Genre_Count2 <- Genre_Count[order(Genre_Count$V1),2]
a <- order(Genre_Count$V1)
Genre_Count2 <- Genre_Count[a,]
Genre_Count[,2] <- c(1:25)
Genre_Count2 <- Genre_Count[a,]
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count))
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
a <- order(Genre_Count$V1,decreasing = TRUE)
Genre_Count2 <- Genre_Count[a,]
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
Genre_Count2 <- Genre_Count[order(Genre_Count$V1,decreasing = TRUE),]
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
View(Genre_Count2)
0.05*85855
Genre_Count[,2] <- NULL
Genre_Count2[which(V1<4292),]
Genre_Count2[which(Genre_Count2$V1<4292),]
Genre_Count2[which(Genre_Count2$V1>4292),]
Genre_Names <- rownames(Genre_Count2[which(Genre_Count2$V1>4292),])
Movies[,23] <- ?in
?in
?like
?where
Movies[which(Movies$year<1950),]
View(Movies[which(Movies$year<1950),])
summary(is.na(Movies$budget))
?contains
Movies[,23] <- which("drama" %in% Movies$genre)
View(Movies)
Movies[,23] <- "drama" %in% Movies$genre
View(Movies)
Movies[which(!("USA" %in% Movies$country)]
Movies[which(!("USA" %in% Movies$country),]
Movies[which!("USA" %in% Movies$country),]
Movies[!which("USA" %in% Movies$country),]
Movies[which("USA" %in% Movies$country),]
Movies[which("%USA%" %in% Movies$country),]
Movies[which("*USA*" %in% Movies$country),]
Movies[which("^USA^" %in% Movies$country),]
Movies[which(".*USA" %in% Movies$country),]
Movies[which(".USA" %in% Movies$country),]
Movies[which("*USA" %in% Movies$country),]
Movies[which("USA" %in% Movies$country),]
Movies[which("America" %in% Movies$country),]
View(Movies)
barplot(p_Value_Table$P_Value,names.arg = p_Value_Table$Types,col = p_Value_Table$Colours,xlab = 'Types' ,ylab = "P-Value as %",
main = "P-Value of 2 sample T test comparing the mean BST of \n the Individual Type of Pokemon with all Pokemon",las = 0) #Plot showing the p-values of the t test against the types
View(Movies)
summary(Movies$V23)
"drama" %in% Movies$genre
"drama" %in% Movies$genre[2]
Movies$genre[2]
"Drama" %in% Movies$genre[2]
"a" %in% Movies$genre[2]
rownames(Genre_Count2)[1:11]
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
Genre_Names <- rownames(Genre_Count2[which(Genre_Count2$V1>4292),])
Genre_Names
Genre_Names <- rownames(Genre_Count2[which(Genre_Count2$V1>4000),])
Genre_Names
Genre_Names <- rownames(Genre_Count2[which(Genre_Count2$V1>4000),])
Genre_Names
str_contains("Drama, Biography, Crime", "drama",ignore.case = TRUE,)
library(sjmisc)
install.packages(sjmisc)
install.package(sjmisc)
install.packages(dplyr)
installed.packages()
library(dplyr)
str_contains("Drama, Biography, Crime", "drama",ignore.case = TRUE,)
install.packages("sjmisc")
library(sjmisc)
str_contains("Drama, Biography, Crime", "drama",ignore.case = TRUE,)
str_contains("Dram a, Biography, Crime", "drama",ignore.case = TRUE,)
str_contains(Movies$genre, "drama",ignore.case = TRUE,)
Movies$genre
str_contains(Movies$genre[1], "drama",ignore.case = TRUE,)
str_contains(Movies$genre[2], "drama",ignore.case = TRUE,)
"drama" %in% Movies$genre[2]
Movies$genre[2]
"Drama" %in% Movies$genre[2]
'Drama' %in% Movies$genre[2]
is.element('Drama',Movies$genre[2])
is.element('Drama',Movies$genre[2])
Movies$genre[2]
is.element('Biography, Crime, Drama',Movies$genre[2])
is.element('biography, Crime, Drama',Movies$genre[2])
split(Movies$genre[2],",")
split(Movies$genre[2],", ")
split(Movies$genre[2],"b")
?split
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
boxplot(xg, col = "lavender", notch = TRUE, varwidth = TRUE)
boxplot(x, col = "lavender", notch = TRUE, varwidth = TRUE)
boxplot(g, col = "lavender", notch = TRUE, varwidth = TRUE)
g
strsplit(Movies$genre[2],"b")
strsplit(Movies$genre[2],"B")
strsplit(Movies$genre[2],", ")
is.element('Drama',strsplit(Movies$genre[2],", "))
as.factor(strsplit(Movies$genre[2],", "))
is.element('Drama',as.factor(strsplit(Movies$genre[2],", ")))
is.element("Drama",as.factor(strsplit(Movies$genre[2],", ")))
?is.element
is.element("Drama",unique(strsplit(Movies$genre[2],", ")))
unique(strsplit(Movies$genre[2],", "))
unique(strsplit(Movies$genre[2],", "))[3]
unique(strsplit(Movies$genre[2],", "))[1]
unique(tolower(strsplit(Movies$genre[2],", "))[1])
Movies[which("America" %in% Movies$country),]
Movies$country
Movies[which("France" %in% Movies$country),]
?grepl
Movies$genre[2]
grepl("Drama",Movies$genre[2])
grepl("Drama",Movies$genre[1])
Movies$genre[1]
for (i in Genre_Names) {
grepl(i,Movies$genre[1])
}
for (i in Genre_Names) {
print(grepl(i,Movies$genre[1]))
}
for (i in Genre_Names) {
print(grepl(i,Movies$genre[2]))
}
Movies$genre[2])
Movies$genre[2]
Genre_Names
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
#Separate the genre column to understand the contents and create a boolean variable for each genre rather than a character variable
Genre <- Movies$genre
Genre
Movies <- read.csv("~/Shangeeth/Projects/Data Project #2 - Movie Ratings Prediction/IMDb movies.csv")
library(sjmisc)
#Separate the genre column to understand the contents and create a boolean variable for each genre rather than a character variable
Genre <- Movies$genre
summary(is.na(Genre))
Genres <- unlist(strsplit(Genre,", "))
#Now we have 25 unique genres to summarize all 85k movies
sort(unique(Genres))
Genres
sum(lengths(regmatches(Genres,gregexpr("Drama",Genres))))
Genre_Count[,2] <- c(1:25)
a <- order(Genre_Count$V1,decreasing = TRUE)
Genre_Count2 <- Genre_Count[order(Genre_Count$V1,decreasing = TRUE),]
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
Genre_Names <- rownames(Genre_Count2[which(Genre_Count2$V1>4000),])
grepl("Drama",Movies$genre[2])
test <- []
test <- table()
test <- df()
test <- c()
help(xg)
format(xg)
data.frame()
test <- data.frame()
test[1:1] <- c(2,3,4,45)
test[] <- c(2,3,4,45)
test[] <- c(2,3,4,45)
import(tidyverse)
library(tidyverse)
Movies <- read.csv("~/Shangeeth/Projects/Data Project #2 - Movie Ratings Prediction/IMDb movies.csv")
Movies <- read.csv("~\Shangeeth\Projects\Data_Analytics_Projects\Data Project #2 - Movie Ratings Prediction\IMDb movies.csv")
Movies <- read.csv("~/Shangeeth/Projects/Data_Analytics_Projects/Data Project #2 - Movie Ratings Prediction/IMDb movies.csv")
Ratings <- read.csv("~/Shangeeth/Projects/Data_Analytics_Projects/Data Project #2 - Movie Ratings Prediction/IMDb ratings.csv")
Movies_Ratings <- inner_join(Movies, Ratings, by = c("imdb_title_id"))
library(tidyverse)
Movies_Ratings <- inner_join(Movies, Ratings, by = c("imdb_title_id"))
Movies_Ratings %>% ggplot(aes(weighted_average_vote,year)) + geom_point()
Movies_Ratings(ncol)
ncol(Movies_Ratings)
for(i in ncol(Movies_Ratings)){
ncol(unique(Movies_Ratings[i]))
}
for(i in c(1:ncol(Movies_Ratings))){
ncol(unique(Movies_Ratings[i]))
}
c(1:ncol(Movies_Ratings))
Movies_Ratings[i]
View(Movies_Ratings[i])
(unique(Movies_Ratings[i])
)
nrow(unique(Movies_Ratings[i]))
Movies_Ratings[1,i]
Movies_Ratings[i,1]
Movies_Ratings[1,69]
Movies_Ratings[i,]
Movies_Ratings[,i]
colname(Movies_Ratings[,i])
colnames(Movies_Ratings[,i])
colnames(Movies_Ratings)[1]
for(i in c(1:ncol(Movies_Ratings))){
colnames(Movies_Ratings)[i]
nrow(unique(Movies_Ratings[i]))
}
for(i in c(1:ncol(Movies_Ratings))){
print(colnames(Movies_Ratings)[i])
print(nrow(unique(Movies_Ratings[i])))
}
data()
View(Movies_Ratings)
library(tidyverse)
ggplot(aes(x = year, y = mean_vote)
Movies_Ratings %>% ggplot(aes(x = year, y = mean_vote))+geom_boxplot()
ggplot(data = Movies_Ratings, aes(x = year, y = mean_vote))+geom_boxplot()
ggplot(data = Movies_Ratings, aes(x = year, y = mean_vote))+geom_boxplot()+theme(axis.text.x = element_text(angle=90,vjust=0.5,hjust =1))
ggplot(data = Movies_Ratings, aes(x = year, y = mean_vote))+geom_boxplot()+theme(axis.text.x = element_text(angle=90,vjust=0.5,hjust =1))+theme_classic()
ggplot(data = Movies_Ratings, aes(x = year, y = mean_vote))+geom_boxplot()+theme(axis.text.x = element_text(angle=90,vjust=0.5,hjust =1))
filter(Movies_Ratings, title, mean_vote)
select(Movies_Ratings, all_of(title, mean_vote))
select(Movies_Ratings, all_of(c(title, mean_vote)))
select(Movies_Ratings, all_of(c("title", "mean_vote")))
arrange(filter(select(Movies_Ratings, all_of(c("title", "mean_vote"))),mean_vote < 2.5),mean_vote))
arrange(filter(select(Movies_Ratings, all_of(c("title", "mean_vote"))),mean_vote < 2.5),mean_vote)
arrange(filter(select(Movies_Ratings, all_of(c("title","language","mean_vote"))),language = "English"),mean_vote)
arrange(filter(select(Movies_Ratings, all_of(c("title","language","mean_vote"))),language == "English"),mean_vote)
print(women)
print(mtcars)
print(as.tibble(mtcars))
arrange(filter(select(Movies_Ratings, all_of(c("title","language","mean_vote"))),language == "English"),mean_vote)
arrange(filter(select(Movies_Ratings, all_of(c("title","language","mean_vote"))),language == "English" and n() = 10),mean_vote)
arrange(filter(select(Movies_Ratings, all_of(c("title","language","mean_vote"))),language == "English" & n() = 10),mean_vote)
arrange(filter(select(Movies_Ratings, all_of(c("title","language","mean_vote"))),language == "English" & n() == 10),mean_vote)
print(as.tibble(mtcars))
arrange(filter(select(Movies_Ratings, all_of(c("title","language","mean_vote"))),language == "English"),mean_vote)
arrange(filter(select(Movies_Ratings, all_of(c("title","year","language","mean_vote"))),language == "English"),mean_vote)
arrange(filter(select(Movies_Ratings, all_of(c("title","year","language","mean_vote")))),mean_vote)
arrange(filter(select(Movies_Ratings, all_of(c("title","year","language","mean_vote","total_votes")))),mean_vote)
arrange(filter(select(Movies_Ratings, all_of(c("title","year","language","mean_vote","total_votes"))),language == "Tamil"),mean_vote)
arrange(filter(select(Movies_Ratings, all_of(c("title","year","language","mean_vote","total_votes"))),language == "Tamil"),desc(mean_vote))
# A for loop wasn't working for some reason so I improvised
ggplot(data = bikes, mapping = aes(bikes$cnt,bikes[[1]])) + geom_point() + theme_bw() #instyant
library(tidyverse)
bikes <- read_csv("~/Shangeeth/2_bike sharing.csv")
# A for loop wasn't working for some reason so I improvised
ggplot(data = bikes, mapping = aes(bikes$cnt,bikes[[1]])) + geom_point() + theme_bw() #instyant
bikes <- read_csv("~/Shangeeth/2_bike sharing.csv")
bikes <- read_csv("~/Shangeeth/Projects/Gateway Casino Exam/dataanalysisinterview/2_bike sharing.csv")
# A for loop wasn't working for some reason so I improvised
ggplot(data = bikes, mapping = aes(bikes$cnt,bikes[[1]])) + geom_point() + theme_bw() #instyant
ggplot(data = bikes, mapping = aes(bikes$cnt,bikes[[2]])) + geom_point()+ theme_bw() #dteday
ggplot(data = bikes, mapping = aes(bikes$cnt,bikes[[3]])) + geom_point()+ theme_bw() #season
ggplot(data = bikes, mapping = aes(bikes$cnt,bikes[[4]])) + geom_point()+ theme_bw() #yr
bikes[[4]]
ggplot(data = bikes, mapping = aes(bikes$cnt,bikes[[6]])) + geom_point()+ theme_bw() #holiday
ggplot(data = bikes, mapping = aes(bikes$cnt,bikes[[7]])) + geom_point()+ theme_bw() #weekday
ggplot(data = bikes, mapping = aes(bikes$cnt,bikes[[8]])) + geom_point()+ theme_bw() #workingday
#Found 3 things out
#1. winter has less bikers with the other seasons having about the same amount
#2. When further splitting into months we see that summer months have higher count than winter months
#3. There is a strong positive correlation with temp and a small negative correlation with humidity which we can see here
ggplot(data = bikes,aes(cnt,temp))+geom_point()+geom_smooth(method = "lm")
ggplot(data = bikes,aes(cnt,hum))+geom_point()+geom_smooth(method = "lm")
install.packages("Rcpp")
library(sf)
library(rnatualearthdata)
library(rnatualearth)
install.packages("rnatualearth")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library(tidyverse)
library(sf)
library(rnaturalearthdata)
library(rnaturalearth)
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata")
)
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel", "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
ne_countries()
??ne_countries()
library(rnaturalearth)
library(tidyverse)
library(sf)
library(rnaturalearthdata)
ne_countries()
world1 <- ne_countries()
View(Movies)
Movies <- read.csv("~/Shangeeth/Projects/Data_Analytics_Projects/Data Project #2 - Movie Ratings Prediction/IMDb movies.csv")
Ratings <- read.csv("~/Shangeeth/Projects/Data_Analytics_Projects/Data Project #2 - Movie Ratings Prediction/IMDb ratings.csv")
library(sjmisc)
library(tidyverse)
summary(is.na(Genre))
Genre <- Movies$genre
summary(is.na(Genre))
Genres <- unlist(strsplit(Genre,", "))
library(sjmisc)
summary(is.na(Genre))
library(sjmisc)
summary(sjmisc::is.na(Genre))
sort(unique(Genres))
Genre_Count = data.frame()
Genre_Count = data.frame()
for(i in unique(Genres)){
Genre_Count[i,1] <- sum(lengths(regmatches(Genres,gregexpr(i,Genres))))
}
Genre_Count[,2] <- c(1:25)
a <- order(Genre_Count$V1,decreasing = TRUE)
Genre_Count2 <- Genre_Count[order(Genre_Count$V1,decreasing = TRUE),]
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
sort(unique(Genres))
Genre_COunt2
Genre_Count2
test <- lm(mean_vote~Drama,Genres_and_Ratings)
##Trying to find the correlation of Ratings by each Genre
#Step 1: Find which genres to do the separation on
Movies <- read.csv("~/Shangeeth/Projects/Data_Analytics_Projects/Data Project #2 - Movie Ratings Prediction/IMDb movies.csv")
Ratings <- read.csv("~/Shangeeth/Projects/Data_Analytics_Projects/Data Project #2 - Movie Ratings Prediction/IMDb ratings.csv")
library(tidyverse)
library(sjmisc)
#Separate the genre column to understand the contents and create a boolean variable for each genre rather than a character variable
Genre <- Movies$genre
summary(is.na(Genre))
Genres <- unlist(strsplit(Genre,", "))
#Now we have 25 unique genres to summarize all 85k movies
sort(unique(Genres))
#To count the number of occurrences of each genre to see if any are too small to use
Genre_Count = data.frame()
for(i in unique(Genres)){
Genre_Count[i,1] <- sum(lengths(regmatches(Genres,gregexpr(i,Genres))))
}
Genre_Count[,2] <- c(1:25)
a <- order(Genre_Count$V1,decreasing = TRUE)
Genre_Count2 <- Genre_Count[order(Genre_Count$V1,decreasing = TRUE),]
Genre_Count2
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
#Include does with count >5% of number of movies or 0.05*85855 = 4292.75 or the first 9
#Move to MySQL to create a table that has binary variables for the top 9 genres individually
rownames(Genre_Count2)[1:9]
#Step 2: Create a table with the separated genres for examination
### My SQL code for creating table
###
#Now we import the new table and merge it with ratings
Genres <- read_csv("~/Shangeeth/Projects/Data_Analytics_Projects/Data Project #2 - Movie Ratings Prediction/Genre.csv")
Genres_and_Ratings <- Genres %>% left_join(Ratings)
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Drama, mean_vote,group = Drama))+ggtitle("Drama")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Comedy, mean_vote,group = Comedy))+ggtitle("Comedy")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Romance, mean_vote,group = Romance))+ggtitle("Romance")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Action1, mean_vote,group = Action1))+ggtitle("Action")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Thriller, mean_vote,group = Thriller))+ggtitle("Thriller")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Crime, mean_vote,group = Crime))+ggtitle("Crime")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Horror, mean_vote,group = Horror))+ggtitle("Horror")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Adventure, mean_vote,group = Adventure))+ggtitle("Adventure")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Mystery, mean_vote,group = Mystery))+ggtitle("Mystery")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
test <- lm(mean_vote~Drama,Genres_and_Ratings)
plot(test)
test$model
plot(test$model)
plot(lm(Drama~mean_vote,Genres_and_Ratings)$model)
plot(lm(Year~mean_vote,Genres_and_Ratings)$model)
plot(lm(non_us_voters_rating~mean_vote,Genres_and_Ratings)$model)
plot(lm(Drama~mean_vote,Genres_and_Ratings)$model)
plot(lm(Horror~mean_vote,Genres_and_Ratings)$model)
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Drama, mean_vote,group = Drama))+ggtitle("Drama")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Comedy, mean_vote,group = Comedy))+ggtitle("Comedy")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Romance, mean_vote,group = Romance))+ggtitle("Romance")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Action1, mean_vote,group = Action1))+ggtitle("Action")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Thriller, mean_vote,group = Thriller))+ggtitle("Thriller")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Crime, mean_vote,group = Crime))+ggtitle("Crime")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Horror, mean_vote,group = Horror))+ggtitle("Horror")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Adventure, mean_vote,group = Adventure))+ggtitle("Adventure")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Mystery, mean_vote,group = Mystery))+ggtitle("Mystery")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genre <- Movies$genre
summary(is.na(Genre))
Genres <- unlist(strsplit(Genre,", "))
Genre
sort(unique(Genres))
Genre_Count = data.frame()
for(i in unique(Genres)){
Genre_Count[i,1] <- sum(lengths(regmatches(Genres,gregexpr(i,Genres))))
}
Genre_Count[,2] <- c(1:25)
a <- order(Genre_Count$V1,decreasing = TRUE)
Genre_Count2 <- Genre_Count[order(Genre_Count$V1,decreasing = TRUE),]
Genre_Count2
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
#Include does with count >5% of number of movies or 0.05*85855 = 4292.75 or the first 9
#Move to MySQL to create a table that has binary variables for the top 9 genres individually
rownames(Genre_Count2)[1:9]
Genres
Genre_Count
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Drama, mean_vote,group = Drama))+ggtitle("Drama")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Comedy, mean_vote,group = Comedy))+ggtitle("Comedy")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Romance, mean_vote,group = Romance))+ggtitle("Romance")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Action1, mean_vote,group = Action1))+ggtitle("Action")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Thriller, mean_vote,group = Thriller))+ggtitle("Thriller")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Crime, mean_vote,group = Crime))+ggtitle("Crime")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Horror, mean_vote,group = Horror))+ggtitle("Horror")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Adventure, mean_vote,group = Adventure))+ggtitle("Adventure")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Mystery, mean_vote,group = Mystery))+ggtitle("Mystery")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres <- read_csv("~/Shangeeth/Projects/Data_Analytics_Projects/Data Project #2 - Movie Ratings Prediction/Genre.csv")
Genres_and_Ratings <- Genres %>% left_join(Ratings)
library(tidyverse)
library(sjmisc)
Genres <- read_csv("~/Shangeeth/Projects/Data_Analytics_Projects/Data Project #2 - Movie Ratings Prediction/Genre.csv")
Genres_and_Ratings <- Genres %>% left_join(Ratings)
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Drama, mean_vote,group = Drama))+ggtitle("Drama")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Comedy, mean_vote,group = Comedy))+ggtitle("Comedy")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Romance, mean_vote,group = Romance))+ggtitle("Romance")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Action1, mean_vote,group = Action1))+ggtitle("Action")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Thriller, mean_vote,group = Thriller))+ggtitle("Thriller")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Crime, mean_vote,group = Crime))+ggtitle("Crime")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Horror, mean_vote,group = Horror))+ggtitle("Horror")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Adventure, mean_vote,group = Adventure))+ggtitle("Adventure")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
Genres_and_Ratings %>% ggplot()+geom_boxplot(aes(Mystery, mean_vote,group = Mystery))+ggtitle("Mystery")+theme(
plot.title = element_text(size=20, face="bold",hjust = 0.5))
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
