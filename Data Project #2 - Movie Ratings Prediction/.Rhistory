save(Genre, file = "Genre.csv")
Movies <- read.csv("~/Shangeeth/Projects/Data Project #2 - Movie Ratings Prediction/IMDb movies.csv")
Genre <- Movies$genre
summary(is.na(Genre))
Genre_Table <- read.csv(file = Genre)
save(Genre, file = "Genre.csv")
unique(Genre)
sort(unique(Genre))
?sort
sort(unique(Genre)decreasing = TRUE)
sort(unique(Genre),decreasing = TRUE)
save(Genre, file = "Genre.csv")
read.csv("~/Genre.csv")
read.csv("~/Shangeeth/Projects/Data Project #2 - Movie Ratings Prediction/Genre.csv")
?save
?write.csv
Genre_Table <- data.frame(Genre)
write.csv(Genre_Table, file ="Genre.csv")
read.csv("~/Shangeeth/Projects/Data Project #2 - Movie Ratings Prediction/Genre.csv")
Genres <- read.csv("~/Shangeeth/Projects/Data Project #2 - Movie Ratings Prediction/Genre.csv")
View(Genres)
unlist(strsplit(Genre,","))
Genres <- unlist(strsplit(Genre,","))
Unique(Genres)
unique(Genres)
Summary(Genres)
barplot(Genres)
plot(Genres)
count.fields(Genres)
sort(unique(Genres))
Genres <- unlist(strsplit(Genre,", "))
sort(unique(Genres))
?gregexpr
?unlist
strsplit(Genre,", ")
regmatches(Genres, "Action")
gregexpr("Action",Genres)
Genres <- unlist(strsplit(Genre,", "))
regmatches(Genres,gregexpr("Action",Genres))
lengths(regmatches(Genres,gregexpr("Action",Genres)))
?lengths
for(i in unique(Genres)){
Genre_Count[i,1] <- sum(lengths(regmatches(Genres,gregexpr("Action",Genres))))
}
Genre_Count = df()
?df
Genre_Count = data.frame()
for(i in unique(Genres)){
Genre_Count[i,1] <- sum(lengths(regmatches(Genres,gregexpr(i,Genres))))
}
plot(Genre_Count,names.arg = rownames(Genre_Count))
View(Genre_Count)
plot(Genre_Count~c(1:25),names.arg = rownames(Genre_Count))
plot(Genre_Count$V1~c(1:25),names.arg = rownames(Genre_Count))
plot(Genre_Count$V1,names.arg = rownames(Genre_Count))
rownames(Genre_Count)
Genre_Count <- Genre_Count[order(Genre_Count$V1),]
Genre_Count <- Genre_Count[order(Genre_Count$V1),1]
Genre_Count = data.frame()
for(i in unique(Genres)){
Genre_Count[i,1] <- sum(lengths(regmatches(Genres,gregexpr(i,Genres))))
}
barplot(Genre_Count$V1,names.arg = rownames(Genre_Count))
barplot(i,names.arg = rownames(Genre_Count))
barplot(c(10,20,30,560,40),names.arg = rownames(Genre_Count))
Genre_Count2 <- Genre_Count[order(Genre_Count$V1),1]
Genre_Count2 <- Genre_Count[order(Genre_Count$V1),2]
a <- order(Genre_Count$V1)
Genre_Count2 <- Genre_Count[a,]
Genre_Count[,2] <- c(1:25)
Genre_Count2 <- Genre_Count[a,]
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count))
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
a <- order(Genre_Count$V1,decreasing = TRUE)
Genre_Count2 <- Genre_Count[a,]
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
Genre_Count2 <- Genre_Count[order(Genre_Count$V1,decreasing = TRUE),]
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
View(Genre_Count2)
0.05*85855
Genre_Count[,2] <- NULL
Genre_Count2[which(V1<4292),]
Genre_Count2[which(Genre_Count2$V1<4292),]
Genre_Count2[which(Genre_Count2$V1>4292),]
Genre_Names <- rownames(Genre_Count2[which(Genre_Count2$V1>4292),])
Movies[,23] <- ?in
?in
?like
?where
Movies[which(Movies$year<1950),]
View(Movies[which(Movies$year<1950),])
summary(is.na(Movies$budget))
?contains
Movies[,23] <- which("drama" %in% Movies$genre)
View(Movies)
Movies[,23] <- "drama" %in% Movies$genre
View(Movies)
Movies[which(!("USA" %in% Movies$country)]
Movies[which(!("USA" %in% Movies$country),]
Movies[which!("USA" %in% Movies$country),]
Movies[!which("USA" %in% Movies$country),]
Movies[which("USA" %in% Movies$country),]
Movies[which("%USA%" %in% Movies$country),]
Movies[which("*USA*" %in% Movies$country),]
Movies[which("^USA^" %in% Movies$country),]
Movies[which(".*USA" %in% Movies$country),]
Movies[which(".USA" %in% Movies$country),]
Movies[which("*USA" %in% Movies$country),]
Movies[which("USA" %in% Movies$country),]
Movies[which("America" %in% Movies$country),]
View(Movies)
barplot(p_Value_Table$P_Value,names.arg = p_Value_Table$Types,col = p_Value_Table$Colours,xlab = 'Types' ,ylab = "P-Value as %",
main = "P-Value of 2 sample T test comparing the mean BST of \n the Individual Type of Pokemon with all Pokemon",las = 0) #Plot showing the p-values of the t test against the types
View(Movies)
summary(Movies$V23)
"drama" %in% Movies$genre
"drama" %in% Movies$genre[2]
Movies$genre[2]
"Drama" %in% Movies$genre[2]
"a" %in% Movies$genre[2]
rownames(Genre_Count2)[1:11]
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
Genre_Names <- rownames(Genre_Count2[which(Genre_Count2$V1>4292),])
Genre_Names
Genre_Names <- rownames(Genre_Count2[which(Genre_Count2$V1>4000),])
Genre_Names
Genre_Names <- rownames(Genre_Count2[which(Genre_Count2$V1>4000),])
Genre_Names
str_contains("Drama, Biography, Crime", "drama",ignore.case = TRUE,)
library(sjmisc)
install.packages(sjmisc)
install.package(sjmisc)
install.packages(dplyr)
installed.packages()
library(dplyr)
str_contains("Drama, Biography, Crime", "drama",ignore.case = TRUE,)
install.packages("sjmisc")
library(sjmisc)
str_contains("Drama, Biography, Crime", "drama",ignore.case = TRUE,)
str_contains("Dram a, Biography, Crime", "drama",ignore.case = TRUE,)
str_contains(Movies$genre, "drama",ignore.case = TRUE,)
Movies$genre
str_contains(Movies$genre[1], "drama",ignore.case = TRUE,)
str_contains(Movies$genre[2], "drama",ignore.case = TRUE,)
"drama" %in% Movies$genre[2]
Movies$genre[2]
"Drama" %in% Movies$genre[2]
'Drama' %in% Movies$genre[2]
is.element('Drama',Movies$genre[2])
is.element('Drama',Movies$genre[2])
Movies$genre[2]
is.element('Biography, Crime, Drama',Movies$genre[2])
is.element('biography, Crime, Drama',Movies$genre[2])
split(Movies$genre[2],",")
split(Movies$genre[2],", ")
split(Movies$genre[2],"b")
?split
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
boxplot(xg, col = "lavender", notch = TRUE, varwidth = TRUE)
boxplot(x, col = "lavender", notch = TRUE, varwidth = TRUE)
boxplot(g, col = "lavender", notch = TRUE, varwidth = TRUE)
g
strsplit(Movies$genre[2],"b")
strsplit(Movies$genre[2],"B")
strsplit(Movies$genre[2],", ")
is.element('Drama',strsplit(Movies$genre[2],", "))
as.factor(strsplit(Movies$genre[2],", "))
is.element('Drama',as.factor(strsplit(Movies$genre[2],", ")))
is.element("Drama",as.factor(strsplit(Movies$genre[2],", ")))
?is.element
is.element("Drama",unique(strsplit(Movies$genre[2],", ")))
unique(strsplit(Movies$genre[2],", "))
unique(strsplit(Movies$genre[2],", "))[3]
unique(strsplit(Movies$genre[2],", "))[1]
unique(tolower(strsplit(Movies$genre[2],", "))[1])
Movies[which("America" %in% Movies$country),]
Movies$country
Movies[which("France" %in% Movies$country),]
?grepl
Movies$genre[2]
grepl("Drama",Movies$genre[2])
grepl("Drama",Movies$genre[1])
Movies$genre[1]
for (i in Genre_Names) {
grepl(i,Movies$genre[1])
}
for (i in Genre_Names) {
print(grepl(i,Movies$genre[1]))
}
for (i in Genre_Names) {
print(grepl(i,Movies$genre[2]))
}
Movies$genre[2])
Movies$genre[2]
Genre_Names
barplot(Genre_Count2$V1,names.arg = rownames(Genre_Count2))
